name: ClashForge

on:
  push:
    paths-ignore:
      - '**'
  workflow_dispatch:

jobs:
  run_demo_actions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.10'

      - name: Install requirements.txt
        run: |
          pip install -r ./requirements.txt

      - name: Run ClashForge.py
        run: python ClashForge.py

      - name: Rename clash_config.yaml to clashforge.yaml
        run: mv clash_config.yaml clashforge.yaml

      - name: Upload clashforge.yaml to Gist
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          # Check if a gist ID exists in an environment variable or create a new one
          if [ ! -f ".gist_id" ]; then 
            echo "Creating a new gist..."
            RESPONSE=$(curl -s \
              -H "Authorization: token $GIST_TOKEN" \
              -X POST \
              --data '{"description":"ClashForge Config","public":false,"files":{"clashforge.yaml":{"content":"placeholder"}}}' \
              https://api.github.com/gists)
            echo $RESPONSE | jq -r '.id' > .gist_id
          fi

          # Get the existing gist ID from .gist_id file
          GIST_ID=$(cat .gist_id)

          # Update the existing gist with the renamed file content
          curl -s \
            -H "Authorization: token $GIST_TOKEN" \
            -X PATCH \
            --data "{\"files\":{\"clashforge.yaml\":{\"content\":\"$(cat clashforge.yaml)\"}}}" \
            https://api.github.com/gists/$GIST_ID

      # Optional step for debugging or confirmation purposes
      - name: Print Gist URL
        env:
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          GIST_ID=$(cat .gist_id)
          echo "Your updated gist is available at:"
          echo "https://gist.github.com/${{ github.actor }}/$GIST_ID"
